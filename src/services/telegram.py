import json
from typing import Optional, Dict, Any

import aiohttp
from fastapi import BackgroundTasks

from src.settings import settings
from src.core.errors import TelegramError
from src.schemas.booking import BookingDetailResponse


class TelegramService:
    """
    –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API –∏ –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º –ö–∞—Ä–ª
    """

    def __init__(self):
        self.token = settings.TELEGRAM_BOT_TOKEN
        self.api_url = f"https://api.telegram.org/bot{self.token}"
        self.webhook_url = settings.TELEGRAM_WEBHOOK_URL

    async def set_webhook(self) -> Dict[str, Any]:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞
        """
        if not self.token:
            raise TelegramError("Telegram token not configured")

        if not self.webhook_url:
            raise TelegramError("Webhook URL not configured")

        url = f"{self.api_url}/setWebhook"
        payload = {
            "url": str(self.webhook_url),
            "allowed_updates": ["message", "callback_query"],
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status != 200:
                    text = await response.text()
                    raise TelegramError(f"Failed to set webhook: {text}")

                return await response.json()

    async def delete_webhook(self) -> Dict[str, Any]:
        """
        –£–¥–∞–ª–∏—Ç—å –≤–µ–±—Ö—É–∫ –¥–ª—è –±–æ—Ç–∞
        """
        if not self.token:
            raise TelegramError("Telegram token not configured")

        url = f"{self.api_url}/deleteWebhook"

        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                if response.status != 200:
                    text = await response.text()
                    raise TelegramError(f"Failed to delete webhook: {text}")

                return await response.json()

    async def send_message(
        self,
        chat_id: int,
        text: str,
        parse_mode: str = "HTML",
        reply_markup: Optional[Dict[str, Any]] = None,
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        """
        if not self.token:
            raise TelegramError("Telegram token not configured")

        url = f"{self.api_url}/sendMessage"
        payload = {"chat_id": chat_id, "text": text, "parse_mode": parse_mode}

        if reply_markup:
            payload["reply_markup"] = json.dumps(reply_markup)

        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status != 200:
                    text = await response.text()
                    raise TelegramError(f"Failed to send message: {text}")

                return await response.json()

    def schedule_booking_notification(
        self,
        background_tasks: BackgroundTasks,
        chat_id: int,
        booking: BookingDetailResponse,
    ) -> None:
        """
        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        """
        background_tasks.add_task(self.send_booking_notification, chat_id, booking)

    async def send_booking_notification(
        self, chat_id: int, booking: BookingDetailResponse
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        """
        text = (
            f"üîî <b>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking.id}</b>\n\n"
            f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: <b>{booking.booking_time.strftime('%d.%m.%Y %H:%M')}</b>\n"
            f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: <b>{booking.company_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n"
            f"üîß –£—Å–ª—É–≥–∞: <b>{booking.service_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{booking.amount or 0} ‚ÇΩ</b>\n"
            f"üí≥ –°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: <b>{booking.payment_status}</b>\n\n"
            f"üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {booking.customer_notes or '–ù–µ—Ç'}"
        )

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        reply_markup = {
            "inline_keyboard": [
                [
                    {
                        "text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                        "callback_data": f"confirm_booking:{booking.id}",
                    },
                    {
                        "text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        "callback_data": f"cancel_booking:{booking.id}",
                    },
                ],
                [
                    {
                        "text": "üìã –î–µ—Ç–∞–ª–∏",
                        "callback_data": f"booking_details:{booking.id}",
                    }
                ],
            ]
        }

        return await self.send_message(chat_id, text, reply_markup=reply_markup)

    async def send_booking_confirmation(
        self, chat_id: int, booking_id: int
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        text = (
            f"‚úÖ <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</b>\n\n"
            f"–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ú—ã –±—É–¥–µ–º –∂–¥–∞—Ç—å –≤–∞—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è!"
        )

        return await self.send_message(chat_id, text)

    async def send_booking_cancellation(
        self, chat_id: int, booking_id: int, reason: Optional[str] = None
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        """
        text = f"‚ùå <b>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"

        if reason:
            text += f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"

        text += "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."

        return await self.send_message(chat_id, text)

    async def send_booking_reminder(
        self, chat_id: int, booking: BookingDetailResponse
    ) -> Dict[str, Any]:
        """
        –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        """
        text = (
            f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ #{booking.id}</b>\n\n"
            f"–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ <b>{booking.booking_time.strftime('%d.%m.%Y %H:%M')}</b>\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: <b>{booking.company_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n"
            f"–£—Å–ª—É–≥–∞: <b>{booking.service_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>"
        )

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∏–ª–∏ –æ—Ç–º–µ–Ω—ã
        reply_markup = {
            "inline_keyboard": [
                [
                    {
                        "text": "üìã –î–µ—Ç–∞–ª–∏",
                        "callback_data": f"booking_details:{booking.id}",
                    },
                    {
                        "text": "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                        "callback_data": f"cancel_booking:{booking.id}",
                    },
                ]
            ]
        }

        return await self.send_message(chat_id, text, reply_markup=reply_markup)

    async def process_update(self, update: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç Telegram

        –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –ö–∞—Ä–ª,
        –∫–æ—Ç–æ—Ä—ã–π –±—ã –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–º–æ–≥–∞–ª —Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º —É—Å–ª—É–≥
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if "message" in update and "text" in update["message"]:
            chat_id = update["message"]["chat"]["id"]
            text = update["message"]["text"]

            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if text.startswith("/start"):
                return await self.send_message(
                    chat_id,
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –Ω–µ–π—Ä–æ–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç <b>–ö–∞—Ä–ª</b>.\n\n"
                    "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—Å–ª—É–≥–∏ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∏—Ö. "
                    "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤—ã –∏—â–µ—Ç–µ, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –Ω–∏–∂–µ.",
                    reply_markup={
                        "keyboard": [
                            [
                                {"text": "üîç –ù–∞–π—Ç–∏ —É—Å–ª—É–≥–∏"},
                                {"text": "üìÖ –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"},
                            ],
                            [{"text": "üè¢ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏"}, {"text": "‚ùì –ü–æ–º–æ—â—å"}],
                        ],
                        "resize_keyboard": True,
                    },
                )

            # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞
            elif "–Ω–∞–π—Ç–∏" in text.lower() or "–ø–æ–∏—Å–∫" in text.lower():
                return await self.send_message(
                    chat_id,
                    "üîç <b>–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?</b>\n\n"
                    "–ù–∞–ø—Ä–∏–º–µ—Ä, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å:\n"
                    "- –ü–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–∞—è –≤ —Ü–µ–Ω—Ç—Ä–µ\n"
                    "- –°—Ç—Ä–∏–∂–∫–∞ –Ω–µ–¥–æ—Ä–æ–≥–æ\n"
                    "- –ú–∞–Ω–∏–∫—é—Ä –∑–∞–≤—Ç—Ä–∞ —É—Ç—Ä–æ–º\n\n"
                    "–ò–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                    reply_markup={
                        "inline_keyboard": [
                            [
                                {
                                    "text": "üíá‚Äç‚ôÄÔ∏è –ö—Ä–∞—Å–æ—Ç–∞",
                                    "callback_data": "search_category:beauty",
                                },
                                {
                                    "text": "üçΩÔ∏è –†–µ—Å—Ç–æ—Ä–∞–Ω—ã",
                                    "callback_data": "search_category:restaurant",
                                },
                            ],
                            [
                                {
                                    "text": "üë®‚Äç‚öïÔ∏è –ú–µ–¥–∏—Ü–∏–Ω–∞",
                                    "callback_data": "search_category:medical",
                                },
                                {
                                    "text": "üõ†Ô∏è –†–µ–º–æ–Ω—Ç",
                                    "callback_data": "search_category:repair",
                                },
                            ],
                        ]
                    },
                )

            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞,
            # –∫–æ—Ç–æ—Ä—ã–π –æ–ø—Ä–µ–¥–µ–ª—è–ª –±—ã –Ω–∞–º–µ—Ä–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–ª –≤–∞—Ä–∏–∞–Ω—Ç—ã
            # –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
            else:
                return await self.send_message(
                    chat_id,
                    "–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è. "
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å.",
                )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±–µ–∫–æ–≤ –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
        elif "callback_query" in update:
            # callback_id = update["callback_query"]["id"]
            chat_id = update["callback_query"]["message"]["chat"]["id"]
            callback_data = update["callback_query"]["data"]

            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            if callback_data.startswith("search_category:"):
                category = callback_data.split(":")[1]
                return await self.send_message(
                    chat_id,
                    f"–í–æ—Ç —á—Ç–æ —è –Ω–∞—à–µ–ª –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category}</b>:\n\n"
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è, –ø–æ—ç—Ç–æ–º—É —Å–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. "
                    "–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞.",
                )

            elif callback_data.startswith("booking_details:"):
                booking_id = callback_data.split(":")[1]
                return await self.send_message(
                    chat_id,
                    f"–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{booking_id}:\n\n"
                    "–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è, –ø–æ—ç—Ç–æ–º—É –¥–µ—Ç–∞–ª–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã. "
                    "–í –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.",
                )

        return None
