from typing import Dict, List, Optional, Protocol, Any

from src.settings import settings
from src.utils.exceptions import TelegramError


class TelegramGatewayProtocol(Protocol):
    """–ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API"""
    
    async def send_message(self, chat_id: int, text: str, **kwargs) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        ...
    
    async def send_booking_notification(
        self, 
        chat_id: int, 
        booking_id: int, 
        service_name: str, 
        company_name: str, 
        booking_time: str
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        ...
    
    async def send_booking_confirmation(
        self, 
        chat_id: int, 
        booking_id: int
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        ...
    
    async def send_booking_cancellation(
        self, 
        chat_id: int, 
        booking_id: int, 
        reason: Optional[str] = None
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        ...


class TelegramGateway:
    """–®–ª—é–∑ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API"""
    
    def __init__(self):
        self.bot_token = settings.TELEGRAM_BOT_TOKEN.get_secret_value() if settings.TELEGRAM_BOT_TOKEN else None
        self.webhook_url = settings.TELEGRAM_WEBHOOK_URL
    
    async def send_message(self, chat_id: int, text: str, **kwargs) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram"""
        if not self.bot_token:
            raise TelegramError("Telegram bot token is not configured")
        
        import aiohttp
        
        url = f"https://api.telegram.org/bot{self.bot_token}/sendMessage"
        payload = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML",
            **kwargs
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.post(url, json=payload) as response:
                if response.status != 200:
                    error_text = await response.text()
                    raise TelegramError(f"Failed to send Telegram message: {error_text}")
                
                result = await response.json()
                return result
    
    async def send_booking_notification(
        self, 
        chat_id: int, 
        booking_id: int, 
        service_name: str, 
        company_name: str, 
        booking_time: str
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        text = (
            f"<b>üîî –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id}</b>\n\n"
            f"–£—Å–ª—É–≥–∞: <b>{service_name}</b>\n"
            f"–ö–æ–º–ø–∞–Ω–∏—è: <b>{company_name}</b>\n"
            f"–í—Ä–µ–º—è: <b>{booking_time}</b>"
        )
        
        return await self.send_message(chat_id, text)
    
    async def send_booking_confirmation(
        self, 
        chat_id: int, 
        booking_id: int
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        text = (
            f"<b>‚úÖ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</b>\n\n"
            f"–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ñ–¥–µ–º –≤–∞—Å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
        )
        
        return await self.send_message(chat_id, text)
    
    async def send_booking_cancellation(
        self, 
        chat_id: int, 
        booking_id: int, 
        reason: Optional[str] = None
    ) -> Dict[str, Any]:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        text = (
            f"<b>‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #{booking_id} –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        )
        
        if reason:
            text += f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        
        return await self.send_message(chat_id, text) 